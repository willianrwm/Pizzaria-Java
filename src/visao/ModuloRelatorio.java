/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import regraNegocio.RelatorioRN;
import vo.PedidoVO;

/**
 *
 * @author Karpa
 */
public class ModuloRelatorio extends javax.swing.JFrame {

    /**
     * Creates new form ModuloRelatorio
     */
    TemplatePrincipal templatePrincipal;
    
    public ModuloRelatorio(TemplatePrincipal templatePrincipal) {
        this.templatePrincipal = templatePrincipal;
        initComponents();
        popularTabela();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pPainel = new javax.swing.JPanel();
        lNomeCliente = new javax.swing.JLabel();
        lDataInicial = new javax.swing.JLabel();
        lDataFinal = new javax.swing.JLabel();
        tfNomeCliente = new javax.swing.JTextField();
        spClientePedidos = new javax.swing.JScrollPane();
        tRelatorio = new javax.swing.JTable();
        sSeparador = new javax.swing.JSeparator();
        bProcurar = new javax.swing.JButton();
        dcInicial = new com.toedter.calendar.JDateChooser();
        dcFinal = new com.toedter.calendar.JDateChooser();
        bSair = new javax.swing.JButton();
        bSalvar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relat√≥rios");
        setMinimumSize(new java.awt.Dimension(650, 400));
        setPreferredSize(new java.awt.Dimension(650, 400));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pPainel.setPreferredSize(new java.awt.Dimension(650, 550));

        lNomeCliente.setText("Nome do Cliente:");

        lDataInicial.setText("Data inicial:");

        lDataFinal.setText("Data final:");

        tRelatorio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Data", "Cliente", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spClientePedidos.setViewportView(tRelatorio);

        bProcurar.setText("Procurar");
        bProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProcurarActionPerformed(evt);
            }
        });

        dcInicial.setDateFormatString("dd/MM/yy");

        dcFinal.setDateFormatString("dd/MM/yy");

        bSair.setText("Sair");
        bSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSairActionPerformed(evt);
            }
        });

        bSalvar.setText("Salvar");
        bSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pPainelLayout = new javax.swing.GroupLayout(pPainel);
        pPainel.setLayout(pPainelLayout);
        pPainelLayout.setHorizontalGroup(
            pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pPainelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sSeparador)
                    .addGroup(pPainelLayout.createSequentialGroup()
                        .addComponent(lNomeCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNomeCliente))
                    .addComponent(spClientePedidos, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                    .addGroup(pPainelLayout.createSequentialGroup()
                        .addGroup(pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lDataInicial)
                            .addComponent(dcInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pPainelLayout.createSequentialGroup()
                                .addComponent(dcFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bProcurar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bSalvar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bSair))
                            .addGroup(pPainelLayout.createSequentialGroup()
                                .addComponent(lDataFinal)
                                .addGap(79, 79, 79)))))
                .addContainerGap())
        );
        pPainelLayout.setVerticalGroup(
            pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pPainelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lNomeCliente)
                    .addComponent(tfNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(spClientePedidos, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pPainelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bProcurar)
                            .addComponent(bSair)
                            .addComponent(bSalvar)))
                    .addGroup(pPainelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lDataInicial)
                            .addComponent(lDataFinal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dcInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dcFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pPainel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSairActionPerformed
        dispose();
    }//GEN-LAST:event_bSairActionPerformed

    private void bProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProcurarActionPerformed
        
        if((tfNomeCliente.getText().equals("")) && ((dcInicial.getDate()==null) || (dcFinal.getDate()==null))){
            JOptionPane.showMessageDialog(null, "Informe o nome, ou a data final e data inicial!", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        
        if (! tfNomeCliente.getText().equals("")){
            filtrarPedidos();
        }
        
        if (! (dcInicial.getDate()==null) && ! (dcFinal.getDate()==null)){
            filtrarPedidosData();
        }
    }//GEN-LAST:event_bProcurarActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        templatePrincipal.setEnabled(true);
        templatePrincipal.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void bSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalvarActionPerformed
        
        JFileChooser jFileChooser = new JFileChooser("C:\\");
        
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Documentos de texto (*.txt)","txt");
        jFileChooser.setFileFilter(filtro);
        
        int valorRetorno = jFileChooser.showSaveDialog(null);
        File caminho = jFileChooser.getSelectedFile();
        
        
        if (caminho.exists() == true){
            int confirmacao = JOptionPane.showConfirmDialog(null, "J√° existe um arquivo com esse nome, deseja sobreescrever?", "Salvar Arquivo", JOptionPane.YES_NO_OPTION);
                if (confirmacao == 0){
                    SalvarArquivo(caminho);
                }
        } else{
            SalvarArquivo(caminho);
        }
    }//GEN-LAST:event_bSalvarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bProcurar;
    private javax.swing.JButton bSair;
    private javax.swing.JButton bSalvar;
    private com.toedter.calendar.JDateChooser dcFinal;
    private com.toedter.calendar.JDateChooser dcInicial;
    private javax.swing.JLabel lDataFinal;
    private javax.swing.JLabel lDataInicial;
    private javax.swing.JLabel lNomeCliente;
    private javax.swing.JPanel pPainel;
    private javax.swing.JSeparator sSeparador;
    private javax.swing.JScrollPane spClientePedidos;
    private javax.swing.JTable tRelatorio;
    private javax.swing.JTextField tfNomeCliente;
    // End of variables declaration//GEN-END:variables

    public void popularTabela() {

        try {

            RelatorioRN relatorioRN = new RelatorioRN();

            ArrayList<PedidoVO> pedidos = relatorioRN.buscarPedidos();

            javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) tRelatorio.getModel();
            dtm.fireTableDataChanged();
            dtm.setRowCount(0);

            for (PedidoVO pedidoVO : pedidos) {

                String[] linha = {"" + pedidoVO.getIdpedido(), "" + pedidoVO.getData(), "" + pedidoVO.getCliente(), "" + pedidoVO.getValor()};
                dtm.addRow(linha);
            }

        } catch (SQLException sqle) {

            JOptionPane.showMessageDialog(null, "Erro: " + sqle.getMessage(), "Bordas", JOptionPane.ERROR_MESSAGE);
            
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage(), "Bordas", JOptionPane.ERROR_MESSAGE);
        }
    }
        
        
    public void filtrarPedidos() {

        try {

            RelatorioRN relatorioRN = new RelatorioRN();

            ArrayList<PedidoVO> pedidos = relatorioRN.filtrarPedidos(tfNomeCliente.getText());

            javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) tRelatorio.getModel();
            dtm.fireTableDataChanged();
            dtm.setRowCount(0);

            for (PedidoVO pedidoVO : pedidos) {

                String[] linha = {"" + pedidoVO.getIdpedido(), "" + pedidoVO.getData(), "" + pedidoVO.getCliente(), "" + pedidoVO.getValor()};
                dtm.addRow(linha);
            }

        } catch (SQLException sqle) {

            JOptionPane.showMessageDialog(null, "Erro: " + sqle.getMessage(), "Clientes", JOptionPane.ERROR_MESSAGE);
            
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage(), "Clientes", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void filtrarPedidosData() {
        
        try {

            RelatorioRN relatorioRN = new RelatorioRN();

            String dataInicial = new SimpleDateFormat("dd/MM/yy").format(dcInicial.getDate());
            String dataFinal = new SimpleDateFormat("dd/MM/yy").format(dcFinal.getDate());
            ArrayList<PedidoVO> pedidos = relatorioRN.filtrarPedidosData(dataInicial, dataFinal, tfNomeCliente.getText());

            javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) tRelatorio.getModel();
            dtm.fireTableDataChanged();
            dtm.setRowCount(0);

            for (PedidoVO pedidoVO : pedidos) {

                String[] linha = {"" + pedidoVO.getIdpedido(), "" + pedidoVO.getData(), "" + pedidoVO.getCliente(), "" + pedidoVO.getValor()};
                dtm.addRow(linha);
            }

        } catch (SQLException sqle) {

            JOptionPane.showMessageDialog(null, "Erro: " + sqle.getMessage(), "Clientes", JOptionPane.ERROR_MESSAGE);
            
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage(), "Clientes", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void SalvarArquivo(File caminho) {
        
        try{
            ArrayList<StringBuilder> linhas = new ArrayList<StringBuilder>();  
            StringBuilder sb;  
                
            for(int i = 0; i< tRelatorio.getRowCount(); i++){  
                sb = new StringBuilder();  
                for(int j = 0; j < tRelatorio.getColumnCount(); j++){  
                    sb.append(tRelatorio.getValueAt(i,j)).append("\t");  
                }  
                linhas.add(sb);  
            } 
            
            
            BufferedWriter documento = new BufferedWriter(new FileWriter(caminho));
            
            for(StringBuilder sbb: linhas){  
                documento.write(sbb.toString());
                documento.newLine();
            }  
            documento.close();
            JOptionPane.showMessageDialog(null, "Arquivo salvo com sucesso!", "Salvar", JOptionPane.PLAIN_MESSAGE);
            
            
        } catch (IOException ioe){
            
            JOptionPane.showMessageDialog(null, "Erro: " + ioe.getMessage(), "Relat√≥rios", JOptionPane.ERROR_MESSAGE);
                
        }
    }
}